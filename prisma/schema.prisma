// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId

  // auth
  email             String    @unique
  hashedPassword    String
  name              String

  // profile
  profile           Profile?

  // user content
  posts             Post[]
  comments          Comment[]
  likes             Like[]

  // friends
  friends           User[]    @relation("UserFollows", fields: [friendsIds], references: [id])
  friendsIds        String[]  @db.ObjectId
  friendOf          User[]    @relation("UserFollows", fields: [friendOfIds], references: [id])
  friendOfIds       String[]  @db.ObjectId
}

model Profile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId

  // profile content
  location    String?
  job         String?
  education   String?
  bio         String?
  image       String?

  // profile owner
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId @unique
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId

  // post content
  content     String
  comments    Comment[]
  likes       Like[]
  createdAt   DateTime  @default(now())

  // post author
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String    @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  // comment content
  content   String
  createdAt DateTime @default(now())

  // comment author
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId

  // commented post
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
}

model Like {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId

  // like author
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId

  // liked post
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?   @db.ObjectId
}
